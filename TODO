Correctness / usability to-do:

static case -- can use sranges + aranges?
HMM -- don't want to rely on DWARF info at runtime right now
SO emit allocsites-like table using sranges-like code 
+ do it in dumptypes

generate typedescs for subprograms

check typestr consistency (OCaml <-> C++)

namespace-aware typestrs
*** issue with struct/union/enum tags: 
    same decl in C++ and C will get different names; bad? YES
    HMM does/could extern "C" help us? -- so 
        C checking casts of allocations made by C++: 
            no extern C involved, so no
            SO: create aliases where sensible?
        C++ checking casts of allocations made by C: 
            could propagate extern-Cness of certain type definitions
            then generate C-style names for them
            

better sizeof-scraping

automatically generate malloc-wrapper stubs

support function pointer casts via wrappers

C-side caching of uniqtypes

cache recent search results in each uniqtype

performance of libunwind?

multithreaded programs: walking other threads' stacks

multithreaded programs: lock-free memtable algs


Many, many optimisations:
- fix inlining
- don't call libunwind as much (see STACK case)
- cache allocated uniqtype in heap trailer
- separate table(s) for large objects

Safeguards:
- check that my "maximum vaddr range" holds
- check that my "maximum static object size" holds
