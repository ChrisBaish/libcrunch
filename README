libcrunch is an infrastructure for fast dynamic type checking. 

In principle it is language-agnostic -- its operations are defined in
terms of "allocations", each having a well-defined "data type".
libcrunch reifies these data types, provides fast access to
per-allocation metadata, and thereby allows assertions such as 

"p is_a Widget"

to be coded directly. 

Currently the only language frontend is for C, and in this case, one
could write 

assert(__is_a(p, "Widget"))

or 

assert(__is_aU(p, &__uniqtype_Widget));

and so on. Moreover, a compiler wrapper allows such checks to be
inserted automatically at particular points -- currently, at pointer
casts.

Allocations may be stack frames, static objects or heap chunks. Data
types are left a somewhat opaque notion, deliberately,  which is
somewhat opaque, but includes a notion of containment.


Current limitations of metadata

- no metadata (debug info) for actual parameters passed in varargs
- no metadata (debug info) for address-taken temporaries
- sizeof scraping is not completely reliable
- heap metadata (sizeof-scraping) for indirect calls to allocation funcs

Current performance quirks

- slow for on-stack data
- slow (currently) for static data
- heap_index's trailer implementation causes clownshoes bugs

Current usability quirks 

- can't provide typedefs to __is_a (very fixable)
- requires manual identification of alloc functions (--alloc-fn) (*)
- requires manual instrumentation of external allocators

Current completeness quirks

- assumes memory-correct execution
- C frontend (trumptr) only instruments casts
- ... i.e. check-on-cast is too eager for some C programming styles

