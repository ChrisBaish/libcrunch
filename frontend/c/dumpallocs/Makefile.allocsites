# This Makefile maintains a repository of allocation site
# metadata, shadowing libraries and executables in the system,
# similar to the /usr/lib/debug hierarchy. 

# HACK! for spaces
nullstring :=
space := $(nullstring) # end

ALLOCSITES_BASE := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))/allocsites
$(warning ALLOCSITES_BASE is $(ALLOCSITES_BASE))
CALLER_RELATIVE_ALLOCSITES_BASE := $(shell find -follow -samefile "$(ALLOCSITES_BASE)" | head -n1 | sed 's|^./||')
$(warning CALLER_RELATIVE_ALLOCSITES_BASE is $(CALLER_RELATIVE_ALLOCSITES_BASE))

OBJDUMPALLOCS ?= $(realpath $(dir $(lastword $(MAKEFILE_LIST))))/objdumpallocs
OBJDEPS ?= $(realpath $(dir $(lastword $(MAKEFILE_LIST))))/objdeps
UNIQTYPES ?= $(realpath $(dir $(lastword $(MAKEFILE_LIST))))/uniqtypes
LDD_FUNCS ?= $(realpath $(dir $(lastword $(MAKEFILE_LIST))))/ldd-funcs.sh
MERGE_ALLOCS ?= $(realpath $(dir $(lastword $(MAKEFILE_LIST))))/merge-allocs.sh
GATHER_OBJALLOCS ?= $(realpath $(dir $(lastword $(MAKEFILE_LIST))))/gather-objallocs.sh
GATHER_SRCALLOCS ?= $(realpath $(dir $(lastword $(MAKEFILE_LIST))))/gather-srcallocs.sh

# By default, remake everything we have already made,
# but don't make new .allocsites files.
default: $(shell find $(ALLOCSITES_BASE) -type f -name '*.allocsites*' ! -name 'Makefile.allocsites' )

# Remaking a .allocsites file from the analogous file 
# in the system.
prefix_exactly_one_slash = $(shell echo "$1" | sed 's|^/*\(.*\)|/\1|' )
# GAH, this doesn't work
$(CALLER_RELATIVE_ALLOCSITES_BASE)/%.allocsites: $(call prefix_exactly_one_slash,%)
	mkdir -p $$(dirname "$@")
	$(OBJDUMPALLOCS) "$<" | sed "s|.*|$<\t&|" > "$@"

# We also know how to build a lib%-uniqtypes.so for each executable.
# Which allocsites files does an executable's uniqtypes depend on?
depend = $(shell $(OBJDEPS) "$1" 2>/dev/null | cut -f1 | while read line; do readlink -f "$$line"; done )

# Note that $1 is always '/'-prefixed here, so we don't insert another L-- here
allocsites_from_obj = $(patsubst %,$(CALLER_RELATIVE_ALLOCSITES_BASE)%.allocsites,$1)
all_allocsites_for_obj = $(foreach f,$1 $(call depend,$1),$(call allocsites_from_obj,$(f)))

# Merge the allocsites from each object into a single file,
# where we also look for dumpallocs-generated allocs files in the build dir.
# The obvious attempt with an implicit rule having $(call dependency-function,/%) doesn't work
# because the function gets expanded before '%' does. 

# One way to do it is to include a Makefile that itself includes a Makefile.
# So, we want to get /path/to/foo.allobjallocs
# so we include its makefile $(CALLER_RELATIVE_ALLOCSITES_BASE)/path/to/foo.allobjallocs
# We can easily write a rule that generates these makefiles.
# AH, but we can't include just the ones we need?!
# So, we can, but to do so we need to create a dynamic makefile based on $(TARGETS)
# based on Paul D. Smith's hack.

# OR we can use GNU Make 3.81's secondary expansion feature! This is much nicer.

.SECONDEXPANSION:

$(CALLER_RELATIVE_ALLOCSITES_BASE)/%.allobjallocs: /% $$(call all_allocsites_for_obj,/%) 
	mkdir -p $$(dirname "$@")
	( cat $(call all_allocsites_for_obj,/$*) | $(GATHER_OBJALLOCS) 2>&1 1>"$@" ) | tee "$@.rej"

$(CALLER_RELATIVE_ALLOCSITES_BASE)/%.allsrcallocs: $(CALLER_RELATIVE_ALLOCSITES_BASE)/%.allobjallocs
	mkdir -p $$(dirname "$@")
	( $(GATHER_SRCALLOCS) "$<" 2>&1 1>"$@" ) | tee "$@.rej"

$(CALLER_RELATIVE_ALLOCSITES_BASE)/%.allallocs: $(CALLER_RELATIVE_ALLOCSITES_BASE)/%.allobjallocs $(CALLER_RELATIVE_ALLOCSITES_BASE)/%.allsrcallocs
	mkdir -p $$(dirname "$@")
	( $(MERGE_ALLOCS) $+ 2>&1 1>"$@" ) | tee "$@.rej"

# Now we can build the uniqtypes library
$(CALLER_RELATIVE_ALLOCSITES_BASE)/%-uniqtypes.c: $(CALLER_RELATIVE_ALLOCSITES_BASE)/%.allallocs uniqtypes
	$(UNIQTYPES) "$<" > "$@"
	
comma := ,
# We need to define macros for the load addrs of each library
$(CALLER_RELATIVE_ALLOCSITES_BASE)/%-uniqtypes.so: $(CALLER_RELATIVE_ALLOCSITES_BASE)/%-uniqtypes.c
	# HACK: use ld --defsym to define alias symbols
	$(CC) -shared \
	$$( . $(LDD_FUNCS) && obj_load_addrs_as_cpp_macros /"$*" ) \
	-o "$@" "$<" \
	-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__sockaddr=__uniqtype__usr_include_x86_64_linux_gnu_bits_socket_h_sockaddr \
	-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__stat=__uniqtype__usr_include_x86_64_linux_gnu_bits_stat_h_stat \
	-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__bases=__uniqtype__var_local_stephen_work_devel_libcrunch_hg_test_random_random_c_bases \
	$(patsubst %,-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__%=__uniqtype__signed_char,char) \
	$(patsubst %,-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__%=__uniqtype__int,signed_int signed) \
	$(patsubst %,-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__%=__uniqtype__unsigned_int,unsigned) \
	$(patsubst %,-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__%=__uniqtype__long_int,long_signed_int signed_long long signed_long_int) \
	$(patsubst %,-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__%=__uniqtype__unsigned_long_int,long_unsigned_int unsigned_long) \
	$(patsubst %,-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__%=__uniqtype__long_long_int,long_long_signed_int signed_long_long signed_long_long_int long_long) \
	$(patsubst %,-Wl$(comma)--defsym$(space)-Wl$(comma)__uniqtype__%=__uniqtype__long_long_unsigned_int,unsigned_long_long_int unsigned_long_long) \
