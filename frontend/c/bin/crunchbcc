#!/usr/bin/env python
# ... or for debugging, use something like
#!/home/stephen/bin/gdbrun python

# Compiler wrapper for libcrunch.
import os, sys, re, subprocess, tempfile

# HACK
if "LIBALLOCS" in os.environ:
    liballocs_base = os.path.realpath(os.environ["LIBALLOCS"])
else:
    liballocs_base = os.path.realpath(os.path.dirname(sys.argv[0]) + "/../../../../liballocs/")
sys.path.append(liballocs_base + "/tools")
sys.path.append(liballocs_base + "/tools/lang/c/lib")
from allocscc import AllocsCC
sys.path.append(os.path.realpath(os.path.dirname(__file__) + "/../lib"))
from crunchcc import CrunchCC

class CrunchBCC(CrunchCC):
    
    def getBoundsConfigLetter(self):
        basename = os.path.basename(sys.argv[0])
        result = re.match("(crunch)?(.)bcc", basename)
        if result:
            return result.groups()[1][0]
        else:
            return 'p'
    
    def getDefines(self):
        to_return = []
        letter = self.getBoundsConfigLetter()
        self.debugMsg("Bounds config: " + letter + "\n")
        libpath = os.path.dirname(__file__) + "/../lib/"
        filename = libpath + "bounds-config-" + letter
        try:
            with open(filename, 'r') as f:
                to_return += [l.strip() for l in f]
            with open(libpath + "bounds-abi") as f:
                to_return += [l.strip() for l in f]
            with open(libpath + "bounds-warnings") as f:
                to_return += [l.strip() for l in f]
        except IOError, e:
            sys.stderr.write("Error: no bounds config file: " + filename + "\n")
            exit(2)
        self.debugMsg("Defines are: " + str(to_return) + "\n")
        return to_return
    
    def doPostLinkMetadataBuild(self, outputFile):
        # SoftBound doesn't need metadata (er, hopefully)
        return 0 if "-DLIBCRUNCH_NO_POINTER_TYPE_INFO" in self.getDefines() else \
            CrunchCC.doPostLinkMetadataBuild(self, outputFile)

    def getStubGenCompileArgs(self):
        # We have to include the CIL inlines with the appropriate flags
        # and then define the init, fini and argwise hooks
        # so that they do the shadow bounds stack stuff
        return ["-include", self.getLibAllocsBaseDir() + "/include/uniqtype.h"] \
            + self.getDefines() \
            + ["-include", \
                os.path.dirname(__file__) + "/../../../include/libcrunch_cil_inlines.h"] \
            + (["-include", \
                os.path.dirname(__file__) + "/../../../include/stubgen_softbound.h"] \
                if "-DLIBCRUNCH_NO_POINTER_TYPE_INFO" in self.getDefines() else [])
    
    # this one is for a final link
    def getExtraLinkArgs(self):
        return [os.path.dirname(__file__) + "/../../../lib/libcrunch_wrappers.o", \
                "-Wl,@" + os.path.dirname(__file__) + "/../../../lib/wrap.ldopts"] \
                if "-DLIBCRUNCH_NO_POINTER_TYPE_INFO" in self.getDefines() else []
    
    # this one is for the *.linked.o big-object link step
    def getExtraRelocLinkArgs(self):
        return []

    def getCillyArgs(self, sourceFiles):
        # PROBLEM: we only want to -include if we're compiling a C file. 
        # Note that normally cilly will figure out when we're compiling
        # a .S file, say, and only pass options that are relevant. But
        # it would be asking too much in this case. 
        
        allSourceFilesAreC = True
        for sourceFile in sourceFiles:
            if sourceFile.lang != "c" and not sourceFile.endswith(".c"):
                allSourceFilesAreC = False
        
        includeArgs = []
        defines = self.getDefines()

        if len(sourceFiles) > 0 and allSourceFilesAreC:
            # We can only do trumptr, and anything else that involves -include, 
            # if we're compiling only C files.
            # temporary HACK to strip line numbers after preprocess
            #"--commPrintLn",
            includeArgs = [ \
            "-include", self.getLibAllocsBaseDir() + "/include/uniqtype-defs.h", \
            "-include", \
                os.path.dirname(__file__) + "/../../../include/libcrunch_cil_inlines.h", \
            "--load=%s" % (os.path.dirname(sys.argv[0]) + "/../ptrintarith/ptrintarith.cmxs"), "--doptrintarith", \
            "--load=%s" % (os.path.dirname(sys.argv[0]) + "/../crunchbound/crunchbound.cmxs"), "--docrunchbound", \
            ] + (["--void-ptr-has-bounds"] if "-DLIBCRUNCH_VOID_POINTERS_HAVE_BOUNDS" in defines else []) \
              + (["--no-object-type-info"] if "-DLIBCRUNCH_NO_POINTER_TYPE_INFO" in defines else []) \
              + (["--skip-secondary-split"] if "-DLIBCRUNCH_NO_SPLIT_PATH" in defines else [])
        else:
            self.debugMsg("No source files, or not all (only %d) are C files\n" % len(sourceFiles))
        
        return AllocsCC.getCillyArgs(self, sourceFiles) + \
            ["--keepunused"] \
            + defines + includeArgs + \
            ["-Wno-unused-variable", "-Wno-unused-label"]
            # We need the above -Wno-unused-... because CIL creates
            # some unused stuff (unavoidably, I believe) which will
            # make compilation done with -Werror barf if we don't
            # silence them.

if __name__ == '__main__':
    wrapper = CrunchBCC()
    ret = wrapper.main()
    exit(ret)

