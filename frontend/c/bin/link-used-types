#!/bin/bash

objfile="$1"

test -n "$objfile" || (echo "Please specify an object file"; false) || exit 1

USEDTYPES=${USEDTYPES:-$( dirname $0 )/../../../allocsites/usedtypes}
LOWER_TYPENAMES=${LOWER_TYPENAMES:-$( dirname $0 )/../src/lower-typenames}
BASE_TYPES_TRANSLATION=${BASE_TYPES_TRANSLATION:-$( dirname $0 )/../src/base-types-translation}
CC=${CC:-$(which cc)}
LD=${LD:-$(which ld)}
OBJCOPY=${OBJCOPY:-$(which objcopy)}

usedtypes_src=$( mktemp )
usedtypes_obj=$( mktemp )

compile () {
   src="$1"
   dest="$2"
   ${CC} -c -x c -o "$dest" "$src" && \
   echo "Compiler generated $dest" 1>&2
}

link_defining_aliases () {
  our_objfile="$1"
  our_usedtypes_obj="$2"
  temporary_out=$( mktemp )
  # NOTE: we used to add aliases here...
  # `nm -fposix "${our_usedtypes_obj}" | $(dirname ${USEDTYPES})/alias-linker-opts-for-base-types.sh | sed -r 's/-Wl,--defsym,/--defsym /g'`
  # but this seems wrong (and, at least, will create "multiple definition" errors at link time)
  ${LD} -o "$temporary_out" -r "$our_objfile" "$our_usedtypes_obj" && \
  echo "Linker generated ${temporary_out}, moving to ${our_objfile}" 1>&2 && \
  mv "$temporary_out" "$our_objfile"
}

symbol_redefinitions () {
    f="$1"
    # Here we are renaming codeless symnames with codeful ones, for the codeful
    # ones that are defined in our temporary (usedtypes) object file. 
    nm -fposix --defined-only "$f" | tr -s '[:blank:]' '\t' | cut -f1 | \
      egrep '__uniqtype_([0-9a-f]{8})_' | \
      sed -r 's/__uniqtype_([0-9a-f]{8})_(.*)/--redefine-sym __uniqtype__\2=__uniqtype_\1_\2/'
}

objcopy_and_redefine_c_names () {
    our_objfile="$1"
    
    candidate_symnames="$( nm -fposix -u "$our_objfile" | \
sed -r 's/[[:blank:]]*U[[:blank:]]*$//' | grep __uniqtype__ )"

    echo "sed program is $sed_program" 1>&2

    # we need to push candidates into the filter and see what comes out;
    # if it changes, add a --redefine-sym option to the list 
    
    . $( dirname $0 )/../lib/symname-funcs.sh
    
    # if any substitutions took effect, issue a redefine-sym command
    while read cand && read canon <&3; do
        if [[ "$cand" != "$canon" ]]; then
            first_redefinition_args="${first_redefinition_args} --redefine-sym ${cand}=${canon}"
        fi
    done<<<"${candidate_symnames}" 3<<<"$( echo "${candidate_symnames}" | translate_symnames "$our_objfile" )"
    
    if [[ -n "${first_redefinition_args}" ]]; then
        # first, lower all undef typenames to canonical ones (but staying codeless)
        echo ${OBJCOPY} $first_redefinition_args "$our_objfile" 1>&2 && \
        ${OBJCOPY} $first_redefinition_args "$our_objfile" && \
        echo "objcopy renamed symbols in $our_objfile according to $first_redefinition_args" 1>&2
        
    else
        echo "No need to replace any C typenames" 1>&2
    fi
}

objcopy_and_redefine_codeless_names () {
    # FIXME: this step is not language-dependent 
    # so should be in allocsites, not frontend/c
    our_objfile="$1"
    our_usedtypes_obj="$2"
    
    # now, fill in the codeful names for codeless ones
    second_redefinition_args="$( symbol_redefinitions "$our_usedtypes_obj" )" && \
    echo ${OBJCOPY} $second_redefinition_args "$our_objfile" 1>&2 && \
    ${OBJCOPY} $second_redefinition_args "$our_objfile" && \
    echo "objcopy renamed symbols in $our_objfile according to $second_redefinition_args" 1>&2
}

echo ${USEDTYPES} "$objfile" 1>&2 # for debugging
(  objcopy_and_redefine_c_names "$objfile" && \
   echo "Successfully did objcopy_and_redefine_c_names" 1>&2 && \
   ${USEDTYPES} "$objfile" > "$usedtypes_src" && \
   echo "Successfully did usedtypes" 1>&2 && \
   compile "$usedtypes_src" "$usedtypes_obj" && \
   echo "Successfully did compile" 1>&2 && \
   objcopy_and_redefine_codeless_names "$objfile" "$usedtypes_obj" && \
   echo "Successfully did objcopy_and_redefine_codeless_names" 1>&2 && \
   link_defining_aliases "$objfile" "$usedtypes_obj" && \
   echo "Successfully did link_defining_aliases" 1>&2 ) || \
    (echo NOT REALLY rm -f "$objfile" 1>&2 ; exit 1)

# rm -f "$usedtypes_src" "$usedtypes_obj"
