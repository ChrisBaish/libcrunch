#!/usr/bin/env python

# Compiler wrapper for libcrunch.
# We identify the input source file in the commandline,
# and export it as an environment variable.
# We then delegate to cilly,
# passing --save-temps=$( dirname "$inputfile" )
# i.e. to ensure that temporaries get created in the source file's location
# FIXME: This might break some builds using a separate objdir.
# The Right Thing to do is to somehow replicate the source directory structure
# rooted at the current directory. But it's not clear how to do this in general.

import os, sys, re, subprocess, tempfile

def isLinkCommand():
    seenLib = False
    seenExecutableOutput = False
    for argnum in range(0,len(sys.argv)):
        arg = sys.argv[argnum]
        if arg.startswith('-l'):
            seenLib = True
        if arg == '-shared' or arg == '-G':
            return True
        if arg == '-c':
            return False
        if arg == "-o" and len(sys.argv) >= argnum + 2 and not '.' in os.path.basename(sys.argv[argnum + 1]):
            seenExecutableOutput = True
    if seenExecutableOutput:
        return True
    # NOTE: we don't use seenLib currently, since we often link simple progs without any -l
    return False

def fixupDotO(filename):
    # also link the file with the uniqtypes it references
    cmd = [os.path.dirname(sys.argv[0]) + "/./link-used-types", filename]
    print "Calling " + " ".join(cmd)
    ret = subprocess.call(cmd)
    if ret != 0:
        return ret  # give up now
    # do we need to unbind? 
    # MONSTER HACK: globalize a symbol if it's a named alloc fn. 
    # This is needed e.g. for SPEC benchmark bzip2
    allocFns = []
    if "LIBCRUNCH_ALLOC_FNS" in os.environ:
        for allocFn in os.environ["LIBCRUNCH_ALLOC_FNS"].split(' '):
            m = re.match("(.*)\((.*)\)(.?)", allocFn)
            fnName = m.groups()[0]
            allocFns += [fnName]
    sys.stderr.write("Looking for allocation functions that need unbinding\n")
    cmdstring = "objdump -t \"%s\" | grep -v UND | egrep \"[ \\.](%s)$\"" \
        % (filename, "|".join(allocFns))
    sys.stderr.write("cmdstring is " + cmdstring + "\n")
    grep_ret = subprocess.call(["sh", "-c", cmdstring])
    if grep_ret == 0:
        # we need to unbind. We unbind the allocsite syms
        # *and* --prefer-non-section-relocs. 
        # This will give us a file with __def_ and __ref_ symbols
        # for the allocation function. We then rename these to 
        # __real_ and __wrap_ respectively. 
        sys.stderr.write("Found that we need to unbind\n")
        unbind_pairs = [["--unbind-sym", sym] for sym in allocFns]
        objcopy_ret = subprocess.call(["objcopy", "--prefer-non-section-relocs"] \
         + [opt for pair in unbind_pairs for opt in pair] \
         + [filename])
        if objcopy_ret != 0:
            return objcopy_ret
        else:
            # one more objcopy to rename the __def_ and __ref_ symbols
            sys.stderr.write("Renaming __def_ and __ref_ alloc symbols\n")
            def_ref_args = [["--redefine-sym", "__def_" + sym + "=" + sym, \
               "--redefine-sym", "__ref_" + sym + "=__wrap_" + sym] for sym in allocFns]
            objcopy_ret = subprocess.call(["objcopy", "--prefer-non-section-relocs"] \
             + [opt for seq in def_ref_args for opt in seq] \
             + [filename])
            if objcopy_ret != 0:
                return objcopy_ret
    
    sys.stderr.write("Looking for allocation functions that need globalizing\n")
    # grep for local symbols -- a lower-case letter after the symname is the giveaway
    cmdstring = "nm -fposix --defined-only \"%s\" | egrep \"^(%s) [a-z] \"" \
        % (filename, "|".join(allocFns))
    sys.stderr.write("cmdstring is " + cmdstring)
    grep_ret = subprocess.call(["sh", "-c", cmdstring])
    if grep_ret == 0:
        sys.stderr.write("Found that we need to globalize\n")
        globalize_pairs = [["--globalize-symbol", sym] for sym in allocFns]
        objcopy_ret = subprocess.call(["objcopy"] \
         + [opt for pair in globalize_pairs for opt in pair] \
         + [filename])
        return objcopy_ret
    # no need to objcopy; all good
    sys.stderr.write("No need to globalize\n")
    return 0

def makeDotOAndPassThrough(argv, customArgs, cInputFiles):
    argvWithoutOutputOptions = [argv[i] for i in range(0, len(argv)) \
       if argv[i] != '-o' and (i != 0 and argv[i-1] != '-o') and argv[i] != '-shared' and argv[i] != '-c' \
       and argv[i] != '-static']
    argvToPassThrough = [x for x in argv[1:] if not x in cInputFiles]
    
    print "C input files: " + ', '.join(cInputFiles)
    
    for sourceFile in cInputFiles:
         # compile to .o with the custom args
         # -- erase -shared etc, and erase "-o blah"
        nameStem, nameExtension = os.path.splitext(sourceFile)
        if (nameExtension == ".c"):
            outputFilename = nameStem + ".o"
            print "Making a secret output file (from .c source) " + outputFilename
        else:
            outputFilename = sourceFile + ".o"
            print "Making a secret output file (from unknown source) " + outputFilename
        ret1 = subprocess.call(["cilly"] + argvWithoutOutputOptions + customArgs \
        + ["-c", "-o", outputFilename, sourceFile])
        
        if ret1 != 0:
            # we didn't succeed, so quit now
            exit(ret1)
        else:
            ret2 = fixupDotO(outputFilename)
            if ret2 != 0:
                # we didn't succeed, so quit now
                exit(ret2)
            
            # include the .o file in our passed-through args
            argvToPassThrough += [outputFilename]

    print "After making .o files, passing through arguments " + " ".join(argvToPassThrough)
    return argvToPassThrough

def main():
    sys.stderr.write("crunchcc called with args  " + " ".join(sys.argv) + "\n")
    # change "-V" to some other undefined option
    skipNext = False
    outputFile = None
    saveTempsArgs = ['-save-temps']
    cInputFiles = []
    oInputFiles = []
    for num in range(0,len(sys.argv)):
        if skipNext: 
            skipNext = False
            continue
        if sys.argv[num] == "-V":
            sys.argv[num] = "-0"
        if sys.argv[num] == "-o":
            outputFile = sys.argv[num + 1]
            skipNext = True
        if sys.argv[num].startswith('-'):
            continue
        if num == 0:
            continue # this means we have "crunchcc" as the arg
        if sys.argv[num].endswith('.o'):
            oInputFiles += [sys.argv[num]]
        if sys.argv[num].endswith('.a') or sys.argv[num].endswith('.o') or \
           sys.argv[num].endswith('.so'):
            # it's a linker input; not the source file
            continue
        else:
            sys.stderr.write("guessed that source file is " + sys.argv[num] + "\n")
            cInputFiles += [sys.argv[num]]
            dirname = os.path.dirname(sys.argv[num])
            if dirname != "":
                saveTempsArgs = ["--save-temps=" + dirname]
    
    # If we're a linker command, then we have to handle allocation functions
    # specially.
    # Each allocation function, e.g. xmalloc, is linked with --wrap.
    # If we're outputting a shared library, we leave it like this,
    # with dangling references to __wrap_xmalloc,
    # and an unused implementation of __real_xmalloc.
    # If we're outputting an executable, 
    # then we link a thread-local variable "__libcrunch_current_allocsite"
    # into the executable,
    # and for each allocation function, we link a generated stub.
    
    crunchccCustomArgs = ["--dotrumptr","--dodumpallocs"] \
    + ["-gdwarf-4", "-gstrict-dwarf", "-fvar-tracking-assignments", \
    "-fno-omit-frame-pointer", "-ffunction-sections"] \
    + saveTempsArgs
    # we add -ffunction-sections to ensure that references to malloc functions 
    # generate a relocation record -- since a *static, address-taken* malloc function
    # might otherwise have its address taken without a relocation record. 
    # Moreover, we want the relocation record to refer to the function symbol, not
    # the section symbol. We handle this by using my hacked-in --prefer-non-section-relocs
    # objcopy option *if* we do symbol unbinding.
    
    mallocWrapArgs = []
    if "LIBCRUNCH_ALLOC_FNS" in os.environ:
        for allocFn in os.environ["LIBCRUNCH_ALLOC_FNS"].split(' '):
            m = re.match("(.*)\((.*)\)(.?)", allocFn)
            fnName = m.groups()[0]
            fnSig = m.groups()[1]
            mallocWrapArgs += ["-Wl,--wrap," + fnName]
    
    # un-export CC from the env if it's set to crunchcc, because 
    # we don't want to recursively cruchcc the -uniqtypes.c files
    # that this make invocation will be compiling for us.
    if "CC" in os.environ and os.environ["CC"].endswith(os.path.basename(sys.argv[0])):
        del os.environ["CC"]

    linkArgs = []
    if isLinkCommand():
        # we need to build the .o files first, 
        # then link in the uniqtypes they reference, 
        # then resume linking these .o files
        if len(cInputFiles) > 0:
            print "Making .o files first from " + " ".join(cInputFiles)
            passedThroughArgs = makeDotOAndPassThrough(sys.argv, crunchccCustomArgs, cInputFiles)
        else:
            passedThroughArgs = sys.argv[1:]
        
        # we need to wrap each allocation function
        sys.stderr.write("crunchcc doing linking\n")
        passedThroughArgs += mallocWrapArgs
        # we need to export-dynamic, s.t. __is_a is linked from libcrunch
        linkArgs += ["-Wl,--export-dynamic"]
        # if we're building an executable, append the magic objects
        # -- and link with the noop *shared* library, to be interposable
        if not "-shared" in passedThroughArgs \
            and not "-G" in passedThroughArgs:
                
            # make a temporary file for the stubs
            stubsfile = tempfile.NamedTemporaryFile(delete=False, suffix=".c")
            sys.stderr.write("stubsfile is %s\n" % stubsfile.name)
            stubsfile.write("#include \"stubgen.h\"\n")
            if "LIBCRUNCH_ALLOC_FNS" in os.environ:
                for allocFn in os.environ["LIBCRUNCH_ALLOC_FNS"].split(' '):
                    m = re.match("(.*)\((.*)\)(.?)", allocFn)
                    fnName = m.groups()[0]
                    fnSig = m.groups()[1]
                    retSig = m.groups()[2]
                    stubsfile.write("#define arglist_%s(make_arg) " % fnName)
                    ndx = 0
                    for c in fnSig: 
                        if ndx != 0:
                            stubsfile.write(", ")
                        stubsfile.write("make_arg(%d, %c)" % (ndx, c))
                        ndx += 1
                    stubsfile.write("\n")
                stubsfile.write("make_wrapper(%s, %s)\n" % (fnName, retSig))
                stubsfile.flush()
            # now we compile the C file ourselves, rather than cilly doing it, 
            # because it's a special magic stub
            stubs_bin = os.path.splitext(stubsfile.name)[0] + ".o"
            ret_stubs = subprocess.call(["cc", "-g", "-c", "-o", stubs_bin, \
                "-I" + os.path.dirname(sys.argv[0]) + "/../../../allocsites", \
                stubsfile.name])
            if ret_stubs != 0:
                sys.stderr.write("Could not compile stubs file %s: compiler returned %d\n" \
                    % (stubsfile.name, ret_stubs))
                exit(1)
            
            # HACK: fix this once I sort out linking
            linkArgs += [stubs_bin]
            linkArgs += ["-L" + os.path.dirname(sys.argv[0]) + "/../../../lib"]
            linkArgs += ["-Wl,-R" + os.path.dirname(sys.argv[0]) + "/../../../lib"]
            if "LIBCRUNCH_USE_PRELOAD" in os.environ and os.environ["LIBCRUNCH_USE_PRELOAD"] == "no":
                linkArgs += ["-lcrunch"]
            else: # FIXME: weak linkage one day
                linkArgs += ["-lcrunch_noop"]
        else:
            # We're building a shared library, so simply add libcrunch_noop.o; 
            # only link directly if we're disabling the preload approach
            if "LIBCRUNCH_USE_PRELOAD" in os.environ and os.environ["LIBCRUNCH_USE_PRELOAD"] == "no":
                linkArgs += ["-L" + os.path.dirname(sys.argv[0]) + "/../../../lib"]
                linkArgs += ["-Wl,-R" + os.path.dirname(sys.argv[0]) + "/../../../lib"]
                if "LIBCRUNCH_USE_PRELOAD" in os.environ and os.environ["LIBCRUNCH_USE_PRELOAD"] == "no":
                    linkArgs += ["-lcrunch"]
            else: # FIXME: weak linkage one day....
                linkArgs += [os.path.dirname(sys.argv[0]) + "/../../../lib/libcrunch_noop.o"]
            # note: we leave the shared library with 
            # dangling dependencies on __wrap_
            # and unused __real_
            
        linkArgs += ["-ldl"]
        
    else:
        passedThroughArgs = sys.argv[1:]

#    + ["-Wno-attributes"] \

    
    argsToExec = ["--verbose"] + crunchccCustomArgs \
    + linkArgs \
    + passedThroughArgs
    sys.stderr.write("about to run cilly with args: " + " ".join(argsToExec) + "\n")
    sys.stderr.write("passedThroughArgs is: " + " ".join(passedThroughArgs) + "\n")
    sys.stderr.write("crunchccCustomArgs is: " + " ".join(crunchccCustomArgs) + "\n")
    sys.stderr.write("linkArgs is: " + " ".join(linkArgs) + "\n")
    
    ret1 = subprocess.call(["cilly"] + argsToExec)
    
    if ret1 != 0:
        # we didn't succeed, so quit now
        return ret1
    
    # We did succeed, so we need to fix up the output binary's 
    # __uniqtype references to the actual binary-compatible type
    # definitions which the compiler generated.
    
    if not isLinkCommand():
        if outputFile:
            # we have a single named output file
            ret2 = fixupDotO(outputFile)
            return ret2
        else:
            # no explicit output file; the compiler output >=1 .o files, one for each input
            for outputFilename in [nameStem + ".o" for (nameStem, nameExtension) in map(os.path.splitext, cInputFiles)]:
                fixupDotO(outputFilename)
    
    else: # isLinkCommand()
        # We've just output an object, so invoke make to collect the allocsites, 
        # with our target name as the file we've just built, using ALLOCSITES_BASE 
        # to set the appropriate prefix
        if "ALLOCSITES_BASE" in os.environ:
            baseDir = os.environ["ALLOCSITES_BASE"]
        else:
            baseDir = "/usr/lib/allocsites"
        targetNames = [baseDir + os.path.realpath(outputFile) + ext for ext in [".allocs", "-types.c", "-types.o", "-types.so", "-allocsites.c", "-allocsites.so"]]
        

        ret2 = subprocess.call(["make", "-C", os.path.dirname(sys.argv[0]) + "/../../../allocsites", \
            "-f", "Makefile.allocsites"] +  targetNames)
        return ret2

if __name__ == '__main__':
    ret = main()
    exit(ret)

