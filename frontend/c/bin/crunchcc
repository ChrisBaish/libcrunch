#!/usr/bin/env python
# ... or for debugging, use something like
#!/home/stephen/bin/gdbrun python

# Compiler wrapper for libcrunch.
# We identify the input source file in the commandline,
# and export it as an environment variable.
# We then delegate to cilly,
# passing --save-temps=$( dirname "$inputfile" )
# i.e. to ensure that temporaries get created in the source file's location
# FIXME: This might break some builds using a separate objdir.
# The Right Thing to do is to somehow replicate the source directory structure
# rooted at the current directory. But it's not clear how to do this in general.

import os, sys, re, subprocess, tempfile

# HACK
sys.path.append(os.path.realpath(os.path.dirname(sys.argv[0]) + "/../../../../liballocs.hg/tools/lang/c/lib"))
from allocscc import AllocsCC

class CrunchCC(AllocsCC):
 
    def fixupDotO(self, filename):
        # also link the file with the uniqtypes it references
        cmd = [os.path.dirname(sys.argv[0]) + "/./link-used-types", filename]
        sys.stderr.write("Calling " + " ".join(cmd) + "\n")
        ret = subprocess.call(cmd)
        if ret != 0:
            return ret  # give up now
        
        return AllocsCC.fixupDotO(self, filename)
        
    def getCillyArgs(self):
        # do dumpallocs et al *and* trumptr
        return AllocsCC.getCillyArgs(self) + \
            ["--load=%s" % (os.path.dirname(sys.argv[0]) + "/../trumptr/trumptr.cmxs"), \
            "--dotrumptr", \
            "--keepunused", "-include", os.path.dirname(__file__) + "/../../../include/libcrunch_cil_inlines.h", \
            "-Wno-unused-variable", "-Wno-unused-label"]
            # We need the above -Wno-unused-... because CIL creates
            # some unused stuff (unavoidably, I believe) which will
            # make compilation done with -Werror barf if we don't
            # silence them.
    
#    def getCillyArgs(self):
#        # do dumpallocs et al *and* trumptr, loading only trumptr.cmxs (which contains dumpallocs)
#        return ["--load=%s" % (os.path.dirname(sys.argv[0]) + "/../trumptr/trumptr.cmxs"), \
#            "--dodumpallocs", "--dotrumptr"]
    
    def getLdLibBase(self):
        return "-lcrunch"
     
    def getLinkPath(self):
        return os.path.dirname(__file__) + "/../../../lib"

if __name__ == '__main__':
    wrapper = CrunchCC()
    ret = wrapper.main()
    exit(ret)

